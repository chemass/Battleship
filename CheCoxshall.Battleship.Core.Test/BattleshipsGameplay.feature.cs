// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.2.0.0
//      SpecFlow Generator Version:2.2.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace CheCoxshall.Battleship.Core.Test
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.2.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class BattleshipsGameplayFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "BattleshipsGameplay.feature"
#line hidden
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner(null, 0);
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Battleships Gameplay", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Title != "Battleships Gameplay")))
            {
                global::CheCoxshall.Battleship.Core.Test.BattleshipsGameplayFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("EnsureCorrectGameGeneration")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Battleships Gameplay")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("gameplay")]
        public virtual void EnsureCorrectGameGeneration()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("EnsureCorrectGameGeneration", new string[] {
                        "gameplay"});
#line 4
this.ScenarioSetup(scenarioInfo);
#line 5
 testRunner.Given("A new game is created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 6
 testRunner.Then("It should have two game boards", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("EnsureGameIsNotReadyBeforeEachPlayerHasPlacedTheirShips")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Battleships Gameplay")]
        public virtual void EnsureGameIsNotReadyBeforeEachPlayerHasPlacedTheirShips()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("EnsureGameIsNotReadyBeforeEachPlayerHasPlacedTheirShips", ((string[])(null)));
#line 8
this.ScenarioSetup(scenarioInfo);
#line 9
 testRunner.Given("A new game is created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Ship Type",
                        "Orientation",
                        "Cell"});
            table1.AddRow(new string[] {
                        "aircraftcarrier",
                        "horizontally",
                        "A1"});
            table1.AddRow(new string[] {
                        "battleship",
                        "vertically",
                        "A2"});
            table1.AddRow(new string[] {
                        "submarine",
                        "vertically",
                        "A9"});
            table1.AddRow(new string[] {
                        "destroyer",
                        "horizontally",
                        "I9"});
#line 10
 testRunner.And("Player 1 has placed the following ships", ((string)(null)), table1, "And ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Ship Type",
                        "Orientation",
                        "Cell"});
            table2.AddRow(new string[] {
                        "aircraftcarrier",
                        "horizontally",
                        "A1"});
            table2.AddRow(new string[] {
                        "cruiser",
                        "horizontally",
                        "C4"});
            table2.AddRow(new string[] {
                        "submarine",
                        "vertically",
                        "B5"});
            table2.AddRow(new string[] {
                        "destroyer",
                        "horizontally",
                        "I9"});
#line 16
 testRunner.And("Player 2 has placed the following ships", ((string)(null)), table2, "And ");
#line 22
 testRunner.Then("the game should not be ready", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("EnsureGameIsReadyAfterEachPlayerHasPlacedTheirShips")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Battleships Gameplay")]
        public virtual void EnsureGameIsReadyAfterEachPlayerHasPlacedTheirShips()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("EnsureGameIsReadyAfterEachPlayerHasPlacedTheirShips", ((string[])(null)));
#line 24
this.ScenarioSetup(scenarioInfo);
#line 25
 testRunner.Given("A new game is created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Ship Type",
                        "Orientation",
                        "Cell"});
            table3.AddRow(new string[] {
                        "aircraftcarrier",
                        "horizontally",
                        "A1"});
            table3.AddRow(new string[] {
                        "battleship",
                        "vertically",
                        "A2"});
            table3.AddRow(new string[] {
                        "cruiser",
                        "horizontally",
                        "C3"});
            table3.AddRow(new string[] {
                        "submarine",
                        "vertically",
                        "J2"});
            table3.AddRow(new string[] {
                        "destroyer",
                        "horizontally",
                        "I9"});
#line 26
 testRunner.And("Player 1 has placed the following ships", ((string)(null)), table3, "And ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Ship Type",
                        "Orientation",
                        "Cell"});
            table4.AddRow(new string[] {
                        "aircraftcarrier",
                        "horizontally",
                        "A1"});
            table4.AddRow(new string[] {
                        "battleship",
                        "vertically",
                        "A2"});
            table4.AddRow(new string[] {
                        "cruiser",
                        "horizontally",
                        "C3"});
            table4.AddRow(new string[] {
                        "submarine",
                        "vertically",
                        "J2"});
            table4.AddRow(new string[] {
                        "destroyer",
                        "horizontally",
                        "I9"});
#line 33
 testRunner.And("Player 2 has placed the following ships", ((string)(null)), table4, "And ");
#line 40
 testRunner.Then("the game should be ready", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("EnsureAHitIsRegisteredCorrectly")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Battleships Gameplay")]
        public virtual void EnsureAHitIsRegisteredCorrectly()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("EnsureAHitIsRegisteredCorrectly", ((string[])(null)));
#line 42
this.ScenarioSetup(scenarioInfo);
#line 43
 testRunner.Given("A new game is created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Ship Type",
                        "Orientation",
                        "Cell"});
            table5.AddRow(new string[] {
                        "aircraftcarrier",
                        "horizontally",
                        "A1"});
            table5.AddRow(new string[] {
                        "battleship",
                        "vertically",
                        "A2"});
            table5.AddRow(new string[] {
                        "cruiser",
                        "horizontally",
                        "C3"});
            table5.AddRow(new string[] {
                        "submarine",
                        "vertically",
                        "J2"});
            table5.AddRow(new string[] {
                        "destroyer",
                        "horizontally",
                        "I9"});
#line 44
 testRunner.And("Player 1 has placed the following ships", ((string)(null)), table5, "And ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Ship Type",
                        "Orientation",
                        "Cell"});
            table6.AddRow(new string[] {
                        "aircraftcarrier",
                        "horizontally",
                        "A1"});
            table6.AddRow(new string[] {
                        "battleship",
                        "vertically",
                        "A2"});
            table6.AddRow(new string[] {
                        "cruiser",
                        "horizontally",
                        "C3"});
            table6.AddRow(new string[] {
                        "submarine",
                        "vertically",
                        "J2"});
            table6.AddRow(new string[] {
                        "destroyer",
                        "horizontally",
                        "I9"});
#line 51
 testRunner.And("Player 2 has placed the following ships", ((string)(null)), table6, "And ");
#line 58
 testRunner.When("Player 1 has taken a shot at A1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 59
 testRunner.Then("A hit should be registered", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("EnsureAMissIsRegisteredCorrectly")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Battleships Gameplay")]
        public virtual void EnsureAMissIsRegisteredCorrectly()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("EnsureAMissIsRegisteredCorrectly", ((string[])(null)));
#line 61
this.ScenarioSetup(scenarioInfo);
#line 62
 testRunner.Given("A new game is created", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Ship Type",
                        "Orientation",
                        "Cell"});
            table7.AddRow(new string[] {
                        "aircraftcarrier",
                        "horizontally",
                        "A1"});
            table7.AddRow(new string[] {
                        "battleship",
                        "vertically",
                        "A2"});
            table7.AddRow(new string[] {
                        "cruiser",
                        "horizontally",
                        "C3"});
            table7.AddRow(new string[] {
                        "submarine",
                        "vertically",
                        "J2"});
            table7.AddRow(new string[] {
                        "destroyer",
                        "horizontally",
                        "I9"});
#line 63
 testRunner.And("Player 1 has placed the following ships", ((string)(null)), table7, "And ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Ship Type",
                        "Orientation",
                        "Cell"});
            table8.AddRow(new string[] {
                        "aircraftcarrier",
                        "horizontally",
                        "A1"});
            table8.AddRow(new string[] {
                        "battleship",
                        "vertically",
                        "A2"});
            table8.AddRow(new string[] {
                        "cruiser",
                        "horizontally",
                        "C3"});
            table8.AddRow(new string[] {
                        "submarine",
                        "vertically",
                        "J2"});
            table8.AddRow(new string[] {
                        "destroyer",
                        "horizontally",
                        "I9"});
#line 70
 testRunner.And("Player 2 has placed the following ships", ((string)(null)), table8, "And ");
#line 77
 testRunner.When("Player 1 has taken a shot at A9", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 78
 testRunner.Then("A miss should be registered", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("EnsureTheDestructionOfADestroyer")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Battleships Gameplay")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("gameplay")]
        public virtual void EnsureTheDestructionOfADestroyer()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("EnsureTheDestructionOfADestroyer", new string[] {
                        "gameplay"});
#line 81
this.ScenarioSetup(scenarioInfo);
#line 82
 testRunner.Given("I have placed an aircraftcarrier horizontally at cell A1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 83
 testRunner.And("I have placed a battleship vertically at cell A2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 84
 testRunner.And("I have placed a cruiser vertically at cell B2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 85
 testRunner.And("I have placed a destroyer vertically at cell C2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 86
 testRunner.When("A shot lands at cell C2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 87
 testRunner.And("A shot lands at cell C3", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 88
 testRunner.Then("My destroyer should be sunk", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("EnsureTheDestructionOfACarrier")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Battleships Gameplay")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("gameplay")]
        public virtual void EnsureTheDestructionOfACarrier()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("EnsureTheDestructionOfACarrier", new string[] {
                        "gameplay"});
#line 91
this.ScenarioSetup(scenarioInfo);
#line 92
 testRunner.Given("I have placed an aircraftcarrier horizontally at cell A1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 93
 testRunner.And("I have placed a battleship vertically at cell A2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 94
 testRunner.And("I have placed a cruiser vertically at cell B2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 95
 testRunner.And("I have placed a destroyer vertically at cell C2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 96
 testRunner.When("A shot lands at cell A1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 97
 testRunner.And("A shot lands at cell B1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 98
 testRunner.And("A shot lands at cell C1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 99
 testRunner.And("A shot lands at cell D1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 100
 testRunner.And("A shot lands at cell E1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 101
 testRunner.Then("My aircraftcarrier should be sunk", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
