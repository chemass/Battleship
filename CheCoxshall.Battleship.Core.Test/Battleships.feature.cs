// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.2.0.0
//      SpecFlow Generator Version:2.2.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace CheCoxshall.Battleship.Core.Test
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.2.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class BattleshipsFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "Battleships.feature"
#line hidden
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner(null, 0);
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Battleships", "\tMake sure the game board is correctly populated before starting a game", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Title != "Battleships")))
            {
                global::CheCoxshall.Battleship.Core.Test.BattleshipsFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Ensure Readiness")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Battleships")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("boardSetup")]
        public virtual void EnsureReadiness()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Ensure Readiness", new string[] {
                        "boardSetup"});
#line 5
this.ScenarioSetup(scenarioInfo);
#line 6
 testRunner.Given("I have placed an aircraftcarrier horizontally at cell A1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 7
 testRunner.And("I have placed a battleship vertically at cell A2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 8
 testRunner.And("I have placed a cruiser vertically at cell B2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 9
 testRunner.And("I have placed a destroyer vertically at cell C2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 10
 testRunner.And("I have placed a submarine vertically at cell D2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 11
 testRunner.Then("the game board should be ready", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Ensure I cannot start a game without placing all of my ships")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Battleships")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("boardSetup")]
        public virtual void EnsureICannotStartAGameWithoutPlacingAllOfMyShips()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Ensure I cannot start a game without placing all of my ships", new string[] {
                        "boardSetup"});
#line 14
this.ScenarioSetup(scenarioInfo);
#line 15
 testRunner.Given("I have placed an aircraftcarrier horizontally at cell A1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 16
 testRunner.And("I have placed a battleship vertically at cell A2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 17
 testRunner.And("I have placed a cruiser vertically at cell B2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 18
 testRunner.And("I have placed a destroyer vertically at cell C2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 19
 testRunner.Then("the game board should not be ready", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("EnsureTheDestructionOfADestroyer")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Battleships")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("gameplay")]
        public virtual void EnsureTheDestructionOfADestroyer()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("EnsureTheDestructionOfADestroyer", new string[] {
                        "gameplay"});
#line 22
this.ScenarioSetup(scenarioInfo);
#line 23
 testRunner.Given("I have placed an aircraftcarrier horizontally at cell A1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 24
 testRunner.And("I have placed a battleship vertically at cell A2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 25
 testRunner.And("I have placed a cruiser vertically at cell B2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 26
 testRunner.And("I have placed a destroyer vertically at cell C2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 27
 testRunner.When("A shot lands at cell C2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 28
 testRunner.And("A shot lands at cell C3", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 29
 testRunner.Then("My destroyer should be sunk", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("EnsureTheDestructionOfACarrier")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Battleships")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("gameplay")]
        public virtual void EnsureTheDestructionOfACarrier()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("EnsureTheDestructionOfACarrier", new string[] {
                        "gameplay"});
#line 32
this.ScenarioSetup(scenarioInfo);
#line 33
 testRunner.Given("I have placed an aircraftcarrier horizontally at cell A1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 34
 testRunner.And("I have placed a battleship vertically at cell A2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 35
 testRunner.And("I have placed a cruiser vertically at cell B2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 36
 testRunner.And("I have placed a destroyer vertically at cell C2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 37
 testRunner.When("A shot lands at cell A1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 38
 testRunner.And("A shot lands at cell B1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 39
 testRunner.And("A shot lands at cell C1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 40
 testRunner.And("A shot lands at cell D1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 41
 testRunner.And("A shot lands at cell E1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 42
 testRunner.Then("My aircraftcarrier should be sunk", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Ensure game board does not allow overlapping ships")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Battleships")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("gameBoard")]
        public virtual void EnsureGameBoardDoesNotAllowOverlappingShips()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Ensure game board does not allow overlapping ships", new string[] {
                        "gameBoard"});
#line 45
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Ship Type",
                        "Orientation",
                        "Cell"});
            table1.AddRow(new string[] {
                        "aircraftcarrier",
                        "horizontally",
                        "A1"});
            table1.AddRow(new string[] {
                        "battleship",
                        "vertically",
                        "A2"});
            table1.AddRow(new string[] {
                        "cruiser",
                        "horizontally",
                        "C4"});
            table1.AddRow(new string[] {
                        "submarine",
                        "vertically",
                        "B3"});
            table1.AddRow(new string[] {
                        "destroyer",
                        "horizontally",
                        "I9"});
#line 46
 testRunner.Given("I have placed the following ships", ((string)(null)), table1, "Given ");
#line 53
 testRunner.Then("the game board should have thrown a CannotPlaceException with the message \'Ships " +
                    "may not overlap.\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Ensure game board does not allow ships to fall off the edge of the world")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Battleships")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("gameBoard")]
        public virtual void EnsureGameBoardDoesNotAllowShipsToFallOffTheEdgeOfTheWorld()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Ensure game board does not allow ships to fall off the edge of the world", new string[] {
                        "gameBoard"});
#line 56
this.ScenarioSetup(scenarioInfo);
#line 57
 testRunner.Given("I have placed an aircraftcarrier horizontally at cell G1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 58
 testRunner.Then("the game board should have thrown a CannotPlaceException with the message \'Ship e" +
                    "xtends beyond board boundaries.\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Ensure game board does not allow duplicate ships")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Battleships")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("gameBoard")]
        public virtual void EnsureGameBoardDoesNotAllowDuplicateShips()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Ensure game board does not allow duplicate ships", new string[] {
                        "gameBoard"});
#line 61
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Ship Type",
                        "Orientation",
                        "Cell"});
            table2.AddRow(new string[] {
                        "aircraftcarrier",
                        "horizontally",
                        "A1"});
            table2.AddRow(new string[] {
                        "aircraftcarrier",
                        "vertically",
                        "B1"});
#line 62
 testRunner.Given("I have placed the following ships", ((string)(null)), table2, "Given ");
#line 66
 testRunner.Then("the game board should have thrown a CannotPlaceException with the message \'This t" +
                    "ype of ship has already been placed.\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
